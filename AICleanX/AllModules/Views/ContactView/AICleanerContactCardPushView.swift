import SwiftUI
import CoreData
import Contacts
import ContactsUI

struct AICleanerContactCardPushView: View {
    let contact: CNContact // –ö–æ–Ω—Ç–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å –ø–æ–ª–Ω—ã—Ö –∫–ª—é—á–µ–π
    @State private var fullContact: CNContact? // –ö–æ–Ω—Ç–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å –ø–æ–ª–Ω—ã–µ –∫–ª—é—á–∏
    @State private var isLoading = true
    @State private var loadError: Error?
    
    var body: some View {
        Group {
            if isLoading {
                VStack {
                    ProgressView()
                    Text("Loading contact...")
                        .foregroundColor(.secondary)
                }
            } else if let error = loadError {
                VStack {
                    Image(systemName: "exclamationmark.triangle")
                        .foregroundColor(.red)
                    Text("Failed to load contact")
                        .foregroundColor(.red)
                    Text(error.localizedDescription)
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .padding()
            } else if let fullContact = fullContact {
                // üö® –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º, –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
                CNContactViewWrapper(contact: fullContact)
            } else {
                Text("Contact not found")
                    .foregroundColor(.secondary)
            }
        }
        .task {
            await loadFullContact()
        }
    }
    
    private func loadFullContact() async {
        do {
            let store = CNContactStore()
            // üö® –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –í–°–ï –∫–ª—é—á–∏, –≤–∫–ª—é—á–∞—è –∫–ª—é—á–∏ –¥–ª—è CNContactViewController
            var keysToFetch: [CNKeyDescriptor] = [
                CNContactGivenNameKey as CNKeyDescriptor,
                CNContactFamilyNameKey as CNKeyDescriptor,
                CNContactPhoneNumbersKey as CNKeyDescriptor,
                CNContactEmailAddressesKey as CNKeyDescriptor,
                CNContactIdentifierKey as CNKeyDescriptor,
                CNContactOrganizationNameKey as CNKeyDescriptor,
                CNContactJobTitleKey as CNKeyDescriptor,
                CNContactPostalAddressesKey as CNKeyDescriptor,
                CNContactImageDataKey as CNKeyDescriptor,
                CNContactThumbnailImageDataKey as CNKeyDescriptor
            ]
            
            // üö® –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–ë–ê–í–õ–Ø–ï–ú –ê–ì–†–ï–ì–ê–¢–ù–´–ô –ö–õ–Æ–ß:
            keysToFetch.append(CNContactViewController.descriptorForRequiredKeys())
            
            let loadedContact = try store.unifiedContact(
                withIdentifier: contact.identifier,
                keysToFetch: keysToFetch
            )
            
            await MainActor.run {
                self.fullContact = loadedContact
                self.isLoading = false
            }
        } catch {
            await MainActor.run {
                self.loadError = error
                self.isLoading = false
            }
        }
    }
}

struct CNContactViewWrapper: UIViewControllerRepresentable {
    // –ü–æ–ª—É—á–∞–µ–º dismiss –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è SwiftUI
    @Environment(\.dismiss) var dismiss
    let contact: CNContact

    // MARK: - makeUIViewController
    func makeUIViewController(context: Context) -> UINavigationController {
        
        // 1. –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        let contactVC = CNContactViewController(for: contact)
        contactVC.allowsEditing = true // –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–º
        contactVC.allowsActions = true // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–∑–≤–æ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email)
        
        // üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–ê:
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ CNContactViewController –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –∫–Ω–æ–ø–∫—É "Edit",
        // –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å.
        contactVC.navigationItem.rightBarButtonItem = nil // –û—á–∏—â–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        
        // 2. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ Navigation Controller
        let navController = UINavigationController(rootViewController: contactVC)
        
        // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–∞–π–ø–æ–º
        navController.presentationController?.delegate = context.coordinator
        
        // 4. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à—É –∫–Ω–æ–ø–∫—É "Done" (–ì–æ—Ç–æ–≤–æ) –≤ –õ–ï–í–´–ô –í–ï–†–•–ù–ò–ô —É–≥–æ–ª.
        // –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å/–ì–æ—Ç–æ–≤–æ" –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö UIKit.
        let doneButton = UIBarButtonItem(
            barButtonSystemItem: .done,
            target: context.coordinator,
            action: #selector(Coordinator.dismissModal)
        )
        // üö® –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º navigationItem.leftBarButtonItem
        contactVC.navigationItem.leftBarButtonItem = doneButton
        
        return navController
    }

    func updateUIViewController(_ uiViewController: UINavigationController, context: Context) {}
    
    // MARK: - Coordinator
    func makeCoordinator() -> Coordinator {
        Coordinator(dismiss: dismiss)
    }

    class Coordinator: NSObject, UIAdaptivePresentationControllerDelegate {
        private let dismissAction: DismissAction
        
        init(dismiss: DismissAction) {
            self.dismissAction = dismiss
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Done"
        @objc func dismissModal() {
            dismissAction()
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–∞–π–ø–∞ –≤–Ω–∏–∑
        func presentationControllerDidDismiss(_ presentationController: UIPresentationController) {
            dismissAction()
        }
    }
}
